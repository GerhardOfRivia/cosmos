"use strict";(self.webpackChunkdocs_openc3_com=self.webpackChunkdocs_openc3_com||[]).push([[9711],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const a={title:"Bridges"},o=void 0,s={unversionedId:"guides/bridges",id:"guides/bridges",title:"Bridges",description:"COSMOS Bridges provide an easy solution for getting data from devices that don't speak Ethernet into COSMOS.",source:"@site/docs/guides/bridges.md",sourceDirName:"guides",slug:"/guides/bridges",permalink:"/docs/guides/bridges",draft:!1,editUrl:"https://github.com/OpenC3/cosmos/tree/main/docs.openc3.com/docs/guides/bridges.md",tags:[],version:"current",frontMatter:{title:"Bridges"},sidebar:"defaultSidebar",previous:{title:"Guides",permalink:"/docs/guides"},next:{title:"COSMOS and NASA cFS",permalink:"/docs/guides/cfs"}},l={},d=[{value:"Bridges are Generally Just an Interface and Router",id:"bridges-are-generally-just-an-interface-and-router",level:2},{value:"Host Requirements for Running Bridges",id:"host-requirements-for-running-bridges",level:2},{value:"Bridge Configuration: bridge.txt",id:"bridge-configuration-bridgetxt",level:2},{value:"Bridge Commands: openc3cli",id:"bridge-commands-openc3cli",level:2},{value:"Example Bridge Gems",id:"example-bridge-gems",level:2},{value:"Note on Serial Ports",id:"note-on-serial-ports",level:2}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"COSMOS Bridges provide an easy solution for getting data from devices that don't speak Ethernet into COSMOS.\nSerial ports are the most common, but other devices such as USB, PCI cards, and Bluetooth devices can also be\nsupported by using bridges to convert from a host computer accessible device, into an Ethernet byte stream that\nCOSMOS can process from inside of containers."),(0,i.kt)("admonition",{title:"Bridges are Meant to be Dumb",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"The purpose of bridges is to get bytes into COSMOS. Processing should be done in COSMOS itself, including details such as\npacket delineation.")),(0,i.kt)("h2",{id:"bridges-are-generally-just-an-interface-and-router"},"Bridges are Generally Just an Interface and Router"),(0,i.kt)("p",null,"Bridges are generally made up of a COSMOS Interface class that pull data from a host connected device, and a Router that forwards that data to\nCOSMOS over TCP/IP. In most cases, data can be safely sent to COSMOS using the BURST protocol, and let the COSMOS side use the correct packet delineation\nprotocol like LENGTH."),(0,i.kt)("h2",{id:"host-requirements-for-running-bridges"},"Host Requirements for Running Bridges"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Requires a host Ruby installation (Ruby 3)"),(0,i.kt)("li",{parentName:"ul"},"Install the OpenC3 gem",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"gem install openc3"))),(0,i.kt)("li",{parentName:"ul"},"Make sure the Ruby gem executable path is in your PATH environment variable",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You can find this path by running ",(0,i.kt)("inlineCode",{parentName:"li"},"gem environment")," and looking for EXECUTABLE DIRECTORY"))),(0,i.kt)("li",{parentName:"ul"},"If successful, you should be able to run ",(0,i.kt)("inlineCode",{parentName:"li"},"openc3cli")," from a terminal")),(0,i.kt)("h2",{id:"bridge-configuration-bridgetxt"},"Bridge Configuration: bridge.txt"),(0,i.kt)("p",null,"Bridges are run using an configuration file named bridge.txt. This file is a subset of the plugin.txt configuration syntax supporting VARIABLE, INTERFACE, ROUTER, and associated modifier keywords. However, BRIDGES HAVE NO KNOWLEDGE OF TARGETS. So instead of MAP_TARGETS, the INTERFACE is associated with the ROUTER using the ROUTE keyword."),(0,i.kt)("p",null,"The following is the default bridge.txt that is generated by running ",(0,i.kt)("inlineCode",{parentName:"p"},"openc3cli bridgesetup")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# Write serial port name\nVARIABLE write_port_name COM1\n\n# Read serial port name\nVARIABLE read_port_name COM1\n\n# Baud Rate\nVARIABLE baud_rate 115200\n\n# Parity - NONE, ODD, or EVEN\nVARIABLE parity NONE\n\n# Stop bits - 0, 1, or 2\nVARIABLE stop_bits 1\n\n# Write Timeout\nVARIABLE write_timeout 10.0\n\n# Read Timeout\nVARIABLE read_timeout nil\n\n# Flow Control - NONE, or RTSCTS\nVARIABLE flow_control NONE\n\n# Data bits per word - Typically 8\nVARIABLE data_bits 8\n\n# Port to listen for connections from COSMOS - Plugin must match\nVARIABLE router_port 2950\n\n# Port to listen on for connections from COSMOS. Defaults to localhost for security. Will need to be opened\n# if COSMOS is on another machine.\nVARIABLE router_listen_address 127.0.0.1\n\nINTERFACE SERIAL_INT serial_interface.rb <%= write_port_name %> <%= read_port_name %> <%= baud_rate %> <%= parity %> <%= stop_bits %> <%= write_timeout %> <%= read_timeout %>\n  OPTION FLOW_CONTROL <%= flow_control %>\n  OPTION DATA_BITS <%= data_bits %>\n\nROUTER SERIAL_ROUTER tcpip_server_interface.rb <%= router_port %> <%= router_port %> 10.0 nil BURST\n  ROUTE SERIAL_INT\n  OPTION LISTEN_ADDRESS <%= router_listen_address %>\n")),(0,i.kt)("p",null,"VARIABLE provides default values to variables that can be changed when the bridge is started. This example shows an INTERFACE that is configured to use the serial_interface.rb class. It also includes a standard ROUTER using tcpip_server_interface.rb that COSMOS can connect to and get the data from the serial port. The LISTEN_ADDRESS is set to 127.0.0.1 in this example to prevent access from outside of the host system. Docker running on the same machine can access\nthis server using the host.docker.internal hostname and the configured port (2950 in this example)."),(0,i.kt)("h2",{id:"bridge-commands-openc3cli"},"Bridge Commands: openc3cli"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"openc3cli bridgesetup")),(0,i.kt)("p",null,"Generates a bridge.txt example file"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"openc3cli bridge [filename] [variable1=value1] [variable2=value2]")),(0,i.kt)("p",null,"Runs a bridge from a given configuration file. Defaults to bridge.txt in the current directory. Variables can also be passed into to override VARIABLE defaults."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"openc3cli bridgegem [gem_name] [variable1=value1] [variable2=value2]")),(0,i.kt)("p",null,"Runs a bridge using the bridge.txt provided in a bridge gem. Variables can also be passed into to override VARIABLE defaults."),(0,i.kt)("h2",{id:"example-bridge-gems"},"Example Bridge Gems"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Serial Port: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenC3/openc3-cosmos-bridge-serial"},"openc3-cosmos-bridge-serial")),(0,i.kt)("li",{parentName:"ul"},"Host: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenC3/openc3-cosmos-bridge-host"},"openc3-cosmos-bridge-host")),(0,i.kt)("li",{parentName:"ul"},"HIDAPI: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenC3/openc3-cosmos-bridge-hidapi"},"openc3-cosmos-bridge-hidapi")),(0,i.kt)("li",{parentName:"ul"},"PS5 Dual Sense Controller: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenC3/openc3-cosmos-bridge-dualsense"},"openc3-cosmos-bridge-dualsense"))),(0,i.kt)("h2",{id:"note-on-serial-ports"},"Note on Serial Ports"),(0,i.kt)("p",null,"Serial ports can be used directly without bridges on Linux Docker installations."),(0,i.kt)("p",null,"Add the following to the operator service in compose.yaml:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'   devices:\n     - "/dev/ttyUSB0:/dev/ttyUSB0"\n')),(0,i.kt)("p",null,"Make sure the serial device has permissions for the user running Docker to access:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sudo chmod 666 /dev/ttyUSB0\n")))}p.isMDXComponent=!0}}]);